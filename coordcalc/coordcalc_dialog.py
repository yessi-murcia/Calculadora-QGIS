# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CoordCalcDialog
                                 A QGIS plugin
 Calculadora para realizar conversiones entre latitud y longitud, decimales, coordenadas UTM 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-04-18
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Yessi Murcia 
        email                : yessi.murcia03@unah.hn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'coordcalc_dialog_base.ui'))


class CoordCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(CoordCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        #Disparadores para Latitud
        self.spbLatD.valueChanged.connect(self.latDMStoDD)
        self.spbLatMin.valueChanged.connect(self.latDMStoDD)	
        self.spbLatS.valueChanged.connect(self.latDMStoDD)
        self.cmbLatH.currentTextChanged.connect(self.latDMStoDD)

        #Disparadores para Longitud
        self.spbLonD.valueChanged.connect(self.lonDMStoDD)
        self.spbLonMin.valueChanged.connect(self.lonDMStoDD)	
        self.spbLonS.valueChanged.connect(self.lonDMStoDD)
        self.cmbLonH.currentTextChanged.connect(self.lonDMStoDD)
        
        #conector de grados decimales a DMS
        self.spbLatDD.editingFinished.connect(self.latDDtoDMS) 
        self.spbLonDD.editingFinished.connect(self.lonDDtoDMS)
        
        #conectores UTM 
        self.spbX.valueChanged.connect(self.to_LatLon)
        self.spbY.valueChanged.connect(self.to_LatLon)
        self.spbBand.valueChanged.connect(self.to_LatLon)
        self.spbMC.valueChanged.connect(self.to_LatLon)
        self.cmbZona.currentTextChanged.connect(self.to_LatLon)
        
        #conector de grados decimales a DMS
        self.spbLatDD.editingFinished.connect(self.toUTM) 
        self.spbLonDD.editingFinished.connect(self.toUTM)
    
    def latDMStoDD(self):
        iDeg = self.spbLatD.value()
        iMin = self.spbLatMin.value()
        dSeg = self.spbLatS.value()
        sHem = self.cmbLatH.currentText()
	
        dDD = float(iDeg) + iMin/60 + dSeg/3600

        if sHem == "S":
            dDD = dDD * -1
	
        self.spbLatDD.setValue(dDD) 
        
    def lonDMStoDD(self):
        iDeg = self.spbLonD.value()
        iMin = self.spbLonMin.value()
        dSeg = self.spbLonS.value()
        sHem = self.cmbLonH.currentText()
	
        dDD = float(iDeg) + iMin/60 + dSeg/3600

        if sHem == "W":
            dDD = dDD * -1
            
        self.spbLonDD.setValue(dDD)
        
    def latDDtoDMS(self):
        dDD = self.spbLatDD.value()
        
        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSeg = (dMin - iMin) * 60
        
        self.spbLatD.setValue(abs(iDeg))
        self.spbLatMin.setValue(abs(iMin))
        self.spbLatS.setValue(abs(dSeg))
        
        if dDD < 0:
            self.cmbLatH.setCurrentText("S")
        else:
            self.cmbLatH.setCurrentText("N") 
    
    def lonDDtoDMS(self):
        dDD = self.spbLonDD.value()
        
        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSeg = (dMin - iMin) * 60
        
        self.spbLonD.setValue(abs(iDeg))
        self.spbLonMin.setValue(abs(iMin))
        self.spbLonS.setValue(abs(dSeg))
        
        if dDD < 0:
            self.cmbLonH.setCurrentText("W")
        else:
            self.cmbLonH.setCurrentText("E")   
            
     
     def toLatLon(self): 
        
        ##Variables para ambas transformaciones
        #Factor de Escala
        K0 = 0.9996
        
        #Excentricidades
        E = 0.00669438
        E2 = E * E
        E3 = E2 * E
        E_P2 = E / (1 - E)
        
        #Segundas Excentricidades
        SQRT_E = math.sqrt(1 - E)
        _E = (1 - SQRT_E) / (1 + SQRT_E)
        _E2 = _E * _E
        _E3 = _E2 * _E
        _E4 = _E3 * _E
        \
        _E5 = _E4 * _E
        
        
        #Ecuaciones de la conversion a Lat Lon
        P2 = (3 / 2 * _E - 27 / 32 * _E3 + 269 / 512 * _E5)
        P3 = (21 / 16 * _E2 - 55 / 32 * _E4)
        P4 = (151 / 96 * _E3 - 417 / 128 * _E5)
        P5 = (1097 / 512 * _E4)
        
        #Semieje del Elipsoide (WHS84)
        R = 6378137
        #Bandas UTM
        
        NORTH_LETTERS = "NPQRSTUVWXX"
        
        SOUTH_LETTERS = "CDEFGHJKLM"
        #####################################################################
        
        easting = self.sp.value()
        northing = self.spbX.value()
        zone_number = self.spbBand.value()
        zone_letter = self.cmbZona.currentText()
        
        if not 100000 <= easting <= 1000000:
            print('ERROR:\nLa coordenada X debe estar entre 100,000 y 999,999 metros')
            print("\nIntroduce nuevamente los valores")
            
    
        if not 0 <= northing <= 10000000:
            print('ERROR:\nLa coordenada Y debe estar entre 0 y 10,000,000 metros')
            print("\nIntroduce nuevamente los valores")
           
            
        if not 1 <= zone_number <= 60:
            print("ERROR:\nEl numero de la zona debe estar entre 1 y 60")
            print("\nIntroduce nuevamente los valores")
            
        
        if zone_letter not in zone_letter:
            print("ERROR:\nLa letra de la Zona debe estar entre 'C' y 'X'")
            print("Introduce nuevamente los valores")
            
            
        x = easting - 500000
        
        if zone_letter in NORTH_LETTERS:
            y = northing
            
        else:
            y = northing - 10000000
            
        m = y/K0
        
        mu = m / (R * M1)
        
        p_rad = (mu +
                 P2 * math.sin(2 * mu) +
                 P3 * math.sin(4 * mu) +
                 P4 * math.sin(6 * mu) +
                 P5 * math.sin(8 * mu))
        
        p_sin = math.sin(p_rad)
        p_sin2 = p_sin * p_sin
        
        p_cos = math.cos(p_rad)
        
        p_tan = p_sin / p_cos
        p_tan2 = p_tan**2
        p_tan4 = p_tan2**2
        
        ep_sin = 1 - E * p_sin2
        ep_sin_sqrt = math.sqrt(1 - E * p_sin2)
        
        n = R / ep_sin_sqrt
        r = (1 - E) / ep_sin
        
        c = E_P2 * p_cos**2
        c2 = c * c
        
        d = x / (n * K0)
        d2 = d * d
        d3 = d2 * d
        d4 = d3 * d
        d5 = d4 * d
        d6 = d5 * d
        
        latitude = (p_rad - (p_tan / r) *
                   (d2 / 2 -
                    d4 / 24 * (5 + 3 * p_tan2 + 10 * c - 4 * c2 - 9 * E_P2)) +
                    d6 / 720 * (61 + 90 * p_tan2 + 298 * c + 45 * p_tan4 - 252 * E_P2 - 3 * c2))
        
        cenMer = 6 * (zone_number - 1) - 177
        
        long = (d -
                d3 / 6 * (1 + 2 * p_tan2 + c) +
                d5 / 120 * (5 - 2 * c + 28 * p_tan2 - 3 * c2 + 8 * E_P2 + 24 * p_tan4)) / p_cos
        
        #longitud = check_angle(long + math.radians(cenMer))
        longitud =(((long + math.radians(cenMer)) + math.pi) % (2 * math.pi) - math.pi)
        
        latDegrees = math.degrees(latitude)
        lonDegrees = math.degrees(longitud)
    
        print(f"Latitud = {round(latDegrees,5)}")
        print(f"Longitud = {round(lonDegrees,5)}")
        
        return (latDegrees, lonDegrees)
    
    
    def to_UTM(self):
        phi = self.spbLatDD.value()
        
        phiRad = math.radians(phi)
        
        lamb = self.spbLonDD.value()
        
        lambRad = math.radians(lamb)
        zone_letter = self.cmbZona.currentText()
        
        
        ##Variables para ambas transformaciones
        #Factor de Escala
        K0 = 0.9996
        
        #Excentricidades
        E = 0.00669438
        E2 = E * E
        E3 = E2 * E
        E_P2 = E / (1 - E)
        
        #Segundas Excentricidades
        SQRT_E = math.sqrt(1 - E)
        _E = (1 - SQRT_E) / (1 + SQRT_E)
        _E2 = _E * _E
        _E3 = _E2 * _E
        _E4 = _E3 * _E
        \
        _E5 = _E4 * _E
        
        #Ecuaciones de la conversion a UTM
        M1 = (1 - E / 4 - 3 * E2 / 64 - 5 * E3 / 256)
        M2 = (3 * E / 8 + 3 * E2 / 32 + 45 * E3 / 1024)
        M3 = (15 * E2 / 256 + 45 * E3 / 1024)
        M4 = (35 * E3 / 3072)
        #Semieje del Elipsoide (WHS84)
        R = 6378137
        ######################################################################
        
        #Huso
        huso = int((lamb/6) + 31)
        
        print(f"Huso = {huso}")
        
        #Meridiano central de la zona
        cenMer = 6 * (huso - 1) - 177
        print(f"Meridiano Central = {cenMer}")
        cenMer_rad = math.radians(cenMer)
        
        #Letra de Zona
        if -80 <= phi <= 84:
            zona = zone_letter[int(phi + 80) >> 3]
            
        print(f"Zona = {zona}")
            
        cosRad= math.cos(phiRad)
        
        tanRad = math.tan(phiRad)
        
        sinRad = math.sin(phiRad)
        
        tanRad2 = tanRad**2
        
        tanRad4 = tanRad2**2
        
        #Calcula el valor de N 
        n = R / math.sqrt(1 - E * sinRad**2)
        
        c = E_P2 * cosRad**2
        
        #Ecuaciones de la proyección
        a = cosRad * (((lambRad - cenMer_rad) + math.pi) % (2 * math.pi) - math.pi)
        a2 = a * a
        a3 = a2 * a
        a4 = a3 * a
        a5 = a4 * a
        a6 = a5 * a
        
        m = R * (M1 * phiRad -
                 M2 * math.sin(2 * phiRad) +
                 M3 * math.sin(4 * phiRad) -
                 M4 * math.sin(6 * phiRad))
        
        
        X = K0 * n * (a +
                      a3 / 6 * (1 - tanRad2 + c) +
                      a5 / 120 * (5 - 18 * tanRad2 + tanRad4 + 72 * c - 58 * E_P2)) + 500000
        
        y = K0 * (m + n * tanRad * (a2 / 2 +
                  a4 / 24 * (5 - tanRad2 + 9 * c + 4 * c**2) +
                  a6 / 720 * (61 - 58 * tanRad2 + tanRad4 + 600 * c - 330 * E_P2)))
    
        if phi >= 0:
            Y = y
        else:
            Y = 10000000 + y
            
        print(f"X = {round(X,3)}")
        
        print(f"Y = {round(Y,3)}") 
        
        return (X, Y, huso, zona, cenMer)
    